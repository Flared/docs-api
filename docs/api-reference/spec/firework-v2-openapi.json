{
    "openapi": "3.0.1",
    "info": {
        "description": "\nManage and access Firework resources.\n\n### Steps to use the Api\n\n1. `Send` a POST request to `https://api.flare.systems/tokens/generate` with your **Firework** credentials using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) to get a authentication token.\n---\n2. On the current page, click on the **Authorize** button and insert the token using the following format: `Bearer {token}`\n\n   Example value: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.Et9HFtf9R3GEMA0IICOfFMVXY7kkTX1wr4qCyhIf58U`\n---\n3. You should now be able to use SwaggerUI's built-in tools to query the documented endpoints.\n",
        "title": "Firework API",
        "version": "v2"
    },
    "servers": [
        {
            "url": "https://api.flare.io/firework/v2"
        }
    ],
    "security": [
        {
            "BearerAuth": []
        }
    ],
    "tags": [
        {
            "description": "Searches the threat activity database.",
            "name": "search"
        },
        {
            "description": "Manage a user's or organization's identifiers",
            "name": "Identifiers"
        },
        {
            "description": "Perform actions on activities.",
            "name": "activities"
        },
        {
            "description": "Get a detailed list of monitored sources.",
            "name": "sources"
        },
        {
            "description": "Perform actions on the current user.",
            "name": "me"
        },
        {
            "description": "Manage tenants.",
            "name": "tenants"
        },
        {
            "description": "Admin management of organizations.",
            "name": "organizations"
        },
        {
            "description": "Manage reporting as an admin.",
            "name": "reporting"
        }
    ],
    "paths": {
        "/activities/": {
            "get": {
                "operationId": "get_activity_endpoint_/activities/",
                "parameters": [
                    {
                        "in": "query",
                        "name": "uid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the activity"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/actor/profile/{actor_name}": {
            "get": {
                "operationId": "get_actor_/activities/actor/profile/<string:actor_name>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "actor_name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "  Limit results to those found in this time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "actor_time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum number of hits returned per query.",
                        "in": "query",
                        "name": "actor_size",
                        "schema": {
                            "default": 100,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, use the latest response's `search_after` attribute for the next request to get the next page of results.",
                        "in": "query",
                        "name": "actor_search_after",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the actor"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/document/{source}/{id}/extensions": {
            "get": {
                "operationId": "get_ransom_leak_file_extensions_endpoint_/activities/document/<string:source>/<path:id>/extensions",
                "parameters": [
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns all the different file extensions that were found in a ransom leak."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/document/{source}/{id}/files": {
            "get": {
                "operationId": "get_ransom_leak_files_endpoint_/activities/document/<string:source>/<path:id>/files",
                "parameters": [
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the files in a ransom leak matching the specified query"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/leak/{source}/{keyword}": {
            "get": {
                "operationId": "get_leak_endpoint_/activities/leak/<string:source>/<string:keyword>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "keyword",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the leak activity"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Leak activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/leak/{source}/{keyword}/count": {
            "get": {
                "operationId": "get_leak_count_/activities/leak/<string:source>/<string:keyword>/count",
                "parameters": [
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "keyword",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id_}/user_metadata": {
            "get": {
                "operationId": "get_activity_user_metadata_resource_/activities/<string:index>/<string:source>/<path:id_>/user_metadata",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityUserMetadata"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id_}/user_metadata/ignored": {
            "put": {
                "operationId": "put_activity_user_metadata_ignored_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/ignored",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivityUserMetadataIgnored"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityUserMetadata"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "activities"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/activities/{index}/{source}/{id_}/user_metadata/notes": {
            "delete": {
                "operationId": "delete_activity_user_metadata_notes_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/notes",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "activities"
                ]
            },
            "put": {
                "operationId": "put_activity_user_metadata_notes_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/notes",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivityUserNotes"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityUserMetadata"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "activities"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/activities/{index}/{source}/{id_}/user_metadata/remediated": {
            "put": {
                "operationId": "put_activity_user_metadata_remediated_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/remediated",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivityUserMetadataRemediated"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityUserMetadata"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "activities"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/activities/{index}/{source}/{id_}/user_metadata/risk_score": {
            "delete": {
                "operationId": "delete_activity_user_metadata_risk_score_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/risk_score",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "activities"
                ]
            },
            "put": {
                "operationId": "put_activity_user_metadata_risk_score_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/risk_score",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivityUserRiskScore"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityUserMetadata"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "activities"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/activities/{index}/{source}/{id_}/user_metadata/tags": {
            "delete": {
                "operationId": "delete_activity_user_metadata_tags_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/tags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "activities"
                ]
            },
            "get": {
                "operationId": "get_activity_user_metadata_tags_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/tags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityUserMetadata"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "activities"
                ]
            },
            "put": {
                "operationId": "put_activity_user_metadata_tags_/activities/<string:index>/<string:source>/<path:id_>/user_metadata/tags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id_",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivityUserTags"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityUserMetadata"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "activities"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/activities/{index}/{source}/{id}": {
            "get": {
                "operationId": "get_activity_endpoint_deprecated_/activities/<string:index>/<string:source>/<path:id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the activity"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id}/ai_assistance": {
            "get": {
                "operationId": "get_activity_assistance_resource_/activities/<string:index>/<string:source>/<path:id>/ai_assistance",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/get_activity_assistance_resource__activities__string_index___string_source___path_id__ai_assistance_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id}/enrichment": {
            "get": {
                "operationId": "get_activity_enrichment_endpoint_/activities/<string:index>/<string:source>/<path:id>/enrichment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the activity enrichment"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id}/events": {
            "get": {
                "operationId": "get_entity_events_/activities/<string:index>/<string:source>/<path:id>/events",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start from this key when paginating events.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Limit the events per page.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 100,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns events associated with the entity"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id}/highlights": {
            "post": {
                "operationId": "post_activity_highlights_/activities/<string:index>/<string:source>/<path:id>/highlights",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HighlightPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the highlights of an activity"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/activities/{index}/{source}/{id}/leaked_data": {
            "get": {
                "operationId": "get_leaked_data_/activities/<string:index>/<string:source>/<path:id>/leaked_data",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the related leaked_data"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id}/messages": {
            "get": {
                "operationId": "get_activity_messages_/activities/<string:index>/<string:source>/<path:id>/messages",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the related messages"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id}/related/{context}": {
            "get": {
                "operationId": "get_related_items_/activities/<string:index>/<string:source>/<path:id>/related/<string:context>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "context",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID of an identifier.",
                        "explode": true,
                        "in": "query",
                        "name": "identifier_ids",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns related activities"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity have no related items"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/activities/{index}/{source}/{id}/translate": {
            "post": {
                "operationId": "post_translate_activity_/activities/<string:index>/<string:source>/<path:id>/translate",
                "parameters": [
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Set the maximum len of translated text.",
                        "in": "query",
                        "name": "max_len",
                        "schema": {
                            "default": 10000,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the translation of an activity"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Activity not found"
                    }
                },
                "tags": [
                    "activities"
                ]
            }
        },
        "/assets/": {
            "get": {
                "operationId": "get_assets_/assets/",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/get_assets__assets__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "post": {
                "operationId": "post_assets_/assets/",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Identifier"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_assets__assets__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/groups/": {
            "get": {
                "operationId": "get_assets_groups_/assets/groups/",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/get_assets_groups__assets_groups__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "post": {
                "operationId": "post_assets_groups_/assets/groups/",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentifierGroup"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_assets_groups__assets_groups__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/groups/{assets_group_id}": {
            "delete": {
                "operationId": "delete_assets_group_api_/assets/groups/<int:assets_group_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "get": {
                "operationId": "get_assets_group_api_/assets/groups/<int:assets_group_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_assets_groups__assets_groups__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "put": {
                "operationId": "put_assets_group_api_/assets/groups/<int:assets_group_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGroupData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_assets_groups__assets_groups__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/groups/{assets_group_id}/alerts": {
            "get": {
                "operationId": "get_assets_group_alerts_/assets/groups/<int:assets_group_id>/alerts",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/get_assets_group_alerts__assets_groups__int_assets_group_id__alerts_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "post": {
                "operationId": "post_assets_group_alerts_/assets/groups/<int:assets_group_id>/alerts",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedAlert"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedAlert"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/groups/{assets_group_id}/alerts/{alert_id}": {
            "delete": {
                "operationId": "delete_assets_group_alert_/assets/groups/<int:assets_group_id>/alerts/<int:alert_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "alert_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "put": {
                "operationId": "put_assets_group_alert_/assets/groups/<int:assets_group_id>/alerts/<int:alert_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "alert_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedAlert"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedAlert"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/groups/{assets_group_id}/feed": {
            "get": {
                "operationId": "get_assets_group_feed_/assets/groups/<int:assets_group_id>/feed",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Fields to includes in the results in a dotted form. For example, \"data.actor_name\" will include items similar to:```json\n        \"items\": [{\n            \"data\": {\n                \"actor_name\": \"Seller123\"\n            }\n        }]\n        ```\n\n        By default, all fields are included in the response.\n        ",
                        "explode": true,
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "Returns the search result(s)."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Identifier group does not exist."
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "post": {
                "operationId": "post_assets_group_feed_/assets/groups/<int:assets_group_id>/feed",
                "parameters": [
                    {
                        "in": "path",
                        "name": "assets_group_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Fields to includes in the results in a dotted form. For example, \"data.actor_name\" will include items similar to:```json\n        \"items\": [{\n            \"data\": {\n                \"actor_name\": \"Seller123\"\n            }\n        }]\n        ```\n\n        By default, all fields are included in the response.\n        ",
                        "explode": true,
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "Returns the search result(s)."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Identifier group does not exist."
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            }
        },
        "/assets/{asset_id}": {
            "delete": {
                "operationId": "delete_asset_api_/assets/<int:asset_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "get": {
                "operationId": "get_asset_api_/assets/<int:asset_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_assets__assets__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "put": {
                "operationId": "put_asset_api_/assets/<int:asset_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Identifier"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_assets__assets__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/{asset_id}/alerts": {
            "get": {
                "operationId": "get_asset_alerts_/assets/<int:asset_id>/alerts",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/get_assets_group_alerts__assets_groups__int_assets_group_id__alerts_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "post": {
                "operationId": "post_asset_alerts_/assets/<int:asset_id>/alerts",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedAlert"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedAlert"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/{asset_id}/alerts/{alert_id}": {
            "delete": {
                "operationId": "delete_asset_alert_/assets/<int:asset_id>/alerts/<int:alert_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "alert_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "put": {
                "operationId": "put_asset_alert_/assets/<int:asset_id>/alerts/<int:alert_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "alert_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedAlert"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedAlert"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/assets/{asset_id}/feed": {
            "get": {
                "operationId": "get_asset_feed_/assets/<int:asset_id>/feed",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Fields to includes in the results in a dotted form. For example, \"data.actor_name\" will include items similar to:```json\n        \"items\": [{\n            \"data\": {\n                \"actor_name\": \"Seller123\"\n            }\n        }]\n        ```\n\n        By default, all fields are included in the response.\n        ",
                        "explode": true,
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "Returns the search result(s)."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Identifier does not exist."
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            },
            "post": {
                "operationId": "post_asset_feed_/assets/<int:asset_id>/feed",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Fields to includes in the results in a dotted form. For example, \"data.actor_name\" will include items similar to:```json\n        \"items\": [{\n            \"data\": {\n                \"actor_name\": \"Seller123\"\n            }\n        }]\n        ```\n\n        By default, all fields are included in the response.\n        ",
                        "explode": true,
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "Returns the search result(s)."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Identifier does not exist."
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            }
        },
        "/assets/{asset_id}/highlights/{index}/{source}/{id}": {
            "get": {
                "operationId": "get_identifier_activity_highlights_/assets/<int:asset_id>/highlights/<string:index>/<string:source>/<path:id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "index",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "source",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the highlights of the identifier data matching on an activity content."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Identifier or activity does not exist."
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            }
        },
        "/assets/{asset_id}/subdomains/{domain_name}/feed": {
            "get": {
                "operationId": "get_asset_subdomain_feed_/assets/<int:asset_id>/subdomains/<string:domain_name>/feed",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "domain_name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Fields to includes in the results in a dotted form. For example, \"data.actor_name\" will include items similar to:```json\n        \"items\": [{\n            \"data\": {\n                \"actor_name\": \"Seller123\"\n            }\n        }]\n        ```\n\n        By default, all fields are included in the response.\n        ",
                        "explode": true,
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "Returns the search result(s)."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Identifier does not exist."
                    }
                },
                "tags": [
                    "Identifiers"
                ]
            }
        },
        "/assets/{asset_id}/toggle": {
            "post": {
                "operationId": "post_identifier_toggle_/assets/<int:asset_id>/toggle",
                "parameters": [
                    {
                        "in": "path",
                        "name": "asset_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IdentifierToggle"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_assets__assets__200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Identifiers"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/me/feed": {
            "get": {
                "operationId": "get_current_user_home_feed_/me/feed",
                "parameters": [
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "The user's home feed activities"
                    }
                },
                "tags": [
                    "me"
                ]
            },
            "post": {
                "operationId": "post_current_user_home_feed_/me/feed",
                "parameters": [
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "The user's home feed activities"
                    }
                },
                "tags": [
                    "me"
                ]
            }
        },
        "/me/feed/credentials": {
            "get": {
                "operationId": "get_leaked_credentials_feed_endpoint_/me/feed/credentials",
                "parameters": [
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 20,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCredentials"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "me"
                ]
            },
            "post": {
                "operationId": "post_leaked_credentials_feed_endpoint_/me/feed/credentials",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCredentials"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "me"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/me/profile": {
            "get": {
                "operationId": "get_current_user_profile_/me/profile",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the current user's profile"
                    }
                },
                "tags": [
                    "me"
                ]
            },
            "put": {
                "operationId": "put_current_user_profile_/me/profile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/put_current_user_profile__me_profile_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Update is invalid"
                    }
                },
                "tags": [
                    "me"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/me/tenants": {
            "get": {
                "operationId": "get_current_user_tenants_/me/tenants",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns the current user's tenants."
                    }
                },
                "tags": [
                    "me"
                ]
            }
        },
        "/organizations/{organization_id}/members": {
            "get": {
                "operationId": "get_organization_members_api_/organizations/<int:organization_id>/members",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/get_organization_members_api__organizations__int_organization_id__members_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Organization not found"
                    }
                },
                "tags": [
                    "organizations"
                ]
            },
            "post": {
                "operationId": "post_organization_members_api_/organizations/<int:organization_id>/members",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationMemberData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_organization_members_api__organizations__int_organization_id__members_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Organization not found"
                    }
                },
                "tags": [
                    "organizations"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/organizations/{organization_id}/members/{user_id}": {
            "get": {
                "operationId": "get_organization_member_api_/organizations/<int:organization_id>/members/<int:user_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_organization_members_api__organizations__int_organization_id__members_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ]
            },
            "put": {
                "operationId": "put_organization_member_api_/organizations/<int:organization_id>/members/<int:user_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationMember"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post_organization_members_api__organizations__int_organization_id__members_200_response"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/organizations/{organization_id}/members/{user_id}/disable": {
            "post": {
                "operationId": "post_organization_member_disable_/organizations/<int:organization_id>/members/<int:user_id>/disable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnableState"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ]
            }
        },
        "/organizations/{organization_id}/members/{user_id}/enable": {
            "post": {
                "operationId": "post_organization_member_enable_/organizations/<int:organization_id>/members/<int:user_id>/enable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnableState"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ]
            }
        },
        "/organizations/{organization_id}/members/{user_id}/permissions": {
            "post": {
                "operationId": "post_organization_member_permissions_api_/organizations/<int:organization_id>/members/<int:user_id>/permissions",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdatedPermission"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/organizations/{organization_id}/members/{user_id}/tenants": {
            "get": {
                "operationId": "get_organization_member_tenants_/organizations/<int:organization_id>/members/<int:user_id>/tenants",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 20,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantWithCounts"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ]
            }
        },
        "/organizations/{organization_id}/tenants": {
            "get": {
                "operationId": "get_organization_tenants_api_/organizations/<int:organization_id>/tenants",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantWithCounts"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ]
            },
            "post": {
                "operationId": "post_organization_tenants_api_/organizations/<int:organization_id>/tenants",
                "parameters": [
                    {
                        "in": "path",
                        "name": "organization_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewTenantInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tenant"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "organizations"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/reporting/reports": {
            "get": {
                "operationId": "get_reports_endpoint_/reporting/reports",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Lists reports for the current tenant, ordered from newest to oldest."
                    }
                },
                "tags": [
                    "reporting"
                ]
            },
            "post": {
                "operationId": "post_reports_endpoint_/reporting/reports",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewReport"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Creates a new report on the current tenant."
                    }
                },
                "tags": [
                    "reporting"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/reporting/reports/{report_id}": {
            "delete": {
                "operationId": "delete_report_endpoint_/reporting/reports/<int:report_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "report_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Deletes a report."
                    }
                },
                "tags": [
                    "reporting"
                ]
            },
            "get": {
                "operationId": "get_report_endpoint_/reporting/reports/<int:report_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "report_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns a report and its elements."
                    }
                },
                "tags": [
                    "reporting"
                ]
            },
            "patch": {
                "operationId": "patch_report_endpoint_/reporting/reports/<int:report_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "report_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatedReport"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Updates a report."
                    }
                },
                "tags": [
                    "reporting"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/reporting/reports/{report_id}/archive": {
            "post": {
                "operationId": "post_archive_report_endpoint_/reporting/reports/<int:report_id>/archive",
                "parameters": [
                    {
                        "in": "path",
                        "name": "report_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Archives a report."
                    }
                },
                "tags": [
                    "reporting"
                ]
            }
        },
        "/reporting/reports/{report_id}/download": {
            "get": {
                "operationId": "get_report_download_endpoint_/reporting/reports/<int:report_id>/download",
                "parameters": [
                    {
                        "in": "path",
                        "name": "report_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Download a report."
                    }
                },
                "tags": [
                    "reporting"
                ]
            }
        },
        "/search/": {
            "get": {
                "operationId": "get_search_/search/",
                "parameters": [
                    {
                        "description": "Fields to includes in the results in a dotted form. For example, \"data.actor_name\" will include items similar to:```json\n        \"items\": [{\n            \"data\": {\n                \"actor_name\": \"Seller123\"\n            }\n        }]\n        ```\n\n        By default, all fields are included in the response.\n        ",
                        "explode": true,
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "Returns the search result(s)."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "search"
                ]
            },
            "post": {
                "operationId": "post_search_/search/",
                "parameters": [
                    {
                        "description": "Fields to includes in the results in a dotted form. For example, \"data.actor_name\" will include items similar to:```json\n        \"items\": [{\n            \"data\": {\n                \"actor_name\": \"Seller123\"\n            }\n        }]\n        ```\n\n        By default, all fields are included in the response.\n        ",
                        "explode": true,
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "  The `time` parameter is used to limit results to those found in the provided time span.  \n\n  *Expected format* : from@to  \n\n  *Example value* : 2019-09-03T04:00:00.000Z@2019-09-14T04:00:00.000Z",
                        "in": "query",
                        "name": "time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `size` parameter is used to limit the number of results returned for the search query.",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "default": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The `search_after` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `search_after` parameter in your next request with the latest response's `search_after` value to get the next page of results.",
                        "in": "query",
                        "name": "search_after",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The `from` parameter is used to paginate through results.  \n\nTo get the first page of results, omit this parameter. Afterward, include the `from` parameter in your next request with the latest response's `next` value to get the next page of results.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User defined tags used to filter search results",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "User defined operator to apply to tags filter",
                        "in": "query",
                        "name": "tags_query_operator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\nType of activities to search through.\n\n*Expected values* : attachment, listing, ransomleak, forum_post, forum_topic, forum_profile, blog_post, seller, paste, leak, chat_message, chat_message/telegram, domain, bot, stealer_log, infected_devices, driller, driller_forum_topic, driller_forum_post, driller_profile, cc, ccbin, financial_data, leaked_data, leaked_file, document, account, actor, forum_content, blog_content, profile, illicit_networks, open_web, domains, leaks, social_media_account, social_media, source_code, source_code_secrets, source_code_files, stack_exchange, google, service, driller_host, buckets, bucket, bucket_object, whois, experimental\n\n*Some search types contain others*\n- illicit_networks: seller, bot, listing, blog_post, forum_profile, ransomleak, chat_message, stealer_log, forum_post, financial_data, forum_topic\n- open_web: social_media, google, stack_exchange, paste, bucket, source_code_secrets, bucket_object, source_code_files, service\n- leaks: leak\n- domains: domain\n",
                        "explode": true,
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "experimental"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Type of experimental activities to search through.",
                        "explode": true,
                        "in": "query",
                        "name": "experimental_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_action",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "event_actions",
                        "schema": {
                            "enum": [
                                "default",
                                "ignored",
                                "remediated",
                                "risk_score_edited",
                                "exclude_ignored",
                                "ignored_or_remediated"
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "explode": true,
                        "in": "query",
                        "name": "risks",
                        "schema": {
                            "enum": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5"
                            ],
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "default": "created",
                            "enum": [
                                "created",
                                "indexed",
                                "updated",
                                "alertable-materialized",
                                "materialized",
                                "searchable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_global_policies",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The time zone used to compute the statistics.",
                        "in": "query",
                        "name": "time_zone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Query used to filter results. Search query uses the [Lucene query](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/query-dsl-query-string-query.html#query-string-syntax) syntax.",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_modified_risk_score",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "has_notes",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Search"
                                }
                            }
                        },
                        "description": "Returns the search result(s)."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpError"
                                }
                            }
                        },
                        "description": "Query is invalid."
                    }
                },
                "tags": [
                    "search"
                ]
            }
        },
        "/sources/": {
            "get": {
                "operationId": "get_sources_endpoint_/sources/",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns a detailed list of monitored sources."
                    }
                },
                "tags": [
                    "sources"
                ]
            }
        },
        "/sources/status": {
            "get": {
                "operationId": "get_sources_status_/sources/status",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns a list of status for monitored sources."
                    }
                },
                "tags": [
                    "sources"
                ]
            }
        },
        "/sources/updates": {
            "get": {
                "operationId": "get_source_updates_/sources/updates",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Returns source updates."
                    }
                },
                "tags": [
                    "sources"
                ]
            }
        },
        "/tenants/{tenant_id}": {
            "get": {
                "operationId": "get_tenant_api_/tenants/<int:tenant_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenant_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantWithCounts"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "tenants"
                ]
            },
            "put": {
                "operationId": "put_tenant_api_/tenants/<int:tenant_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenant_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TenantData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantWithCounts"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "tenants"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/tenants/{tenant_id}/archive": {
            "post": {
                "operationId": "post_tenant_archive_api_/tenants/<int:tenant_id>/archive",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenant_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Success"
                    }
                },
                "tags": [
                    "tenants"
                ]
            }
        },
        "/tenants/{tenant_id}/users": {
            "get": {
                "operationId": "get_tenant_users_api_/tenants/<int:tenant_id>/users",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenant_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantUsers"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "tenants"
                ]
            },
            "post": {
                "operationId": "post_tenant_users_api_/tenants/<int:tenant_id>/users",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenant_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserTenantAccessRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "Users were successfully added to tenant."
                    }
                },
                "tags": [
                    "tenants"
                ],
                "x-codegen-request-body-name": "payload"
            }
        },
        "/tenants/{tenant_id}/users/{user_id}": {
            "delete": {
                "operationId": "delete_tenant_users_access_api_/tenants/<int:tenant_id>/users/<int:user_id>",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tenant_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "User was successfully removed from the tenant."
                    }
                },
                "tags": [
                    "tenants"
                ]
            }
        }
    },
    "components": {
        "responses": {
            "HTTPException": {
                "content": {},
                "description": ""
            },
            "MaskError": {
                "content": {},
                "description": "When any error occurs on mask"
            },
            "ParseError": {
                "content": {},
                "description": "When a mask can't be parsed"
            }
        },
        "schemas": {
            "ActivityAiAssistance": {
                "properties": {
                    "prompt": {
                        "type": "string"
                    },
                    "response": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ActivityUserMetadata": {
                "properties": {
                    "ignored_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "remediated_asset_uuid": {
                        "type": "string"
                    },
                    "remediated_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "risk_score_updated_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ActivityUserMetadataIgnored": {
                "properties": {
                    "identifier_id": {
                        "type": "integer"
                    },
                    "is_ignored": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "is_ignored"
                ],
                "type": "object"
            },
            "ActivityUserMetadataRemediated": {
                "properties": {
                    "identifier_id": {
                        "type": "integer"
                    },
                    "is_remediated": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "is_remediated"
                ],
                "type": "object"
            },
            "ActivityUserNotes": {
                "properties": {
                    "notes": {
                        "type": "string"
                    }
                },
                "required": [
                    "notes"
                ],
                "type": "object"
            },
            "ActivityUserRiskScore": {
                "properties": {
                    "risk_score": {
                        "type": "integer"
                    }
                },
                "required": [
                    "risk_score"
                ],
                "type": "object"
            },
            "ActivityUserTags": {
                "properties": {
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "tags"
                ],
                "type": "object"
            },
            "AlertUpdate": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "last_result_date": {
                        "format": "date",
                        "type": "string"
                    },
                    "processed_at": {
                        "format": "date",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ArchiveFile": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/ArchiveFileData"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/ArchiveFileErrors"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ArchiveFileMetadata"
                    },
                    "password": {
                        "type": "string"
                    },
                    "ransomleak_uid": {
                        "type": "string"
                    },
                    "retry_after": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "retry_count": {
                        "type": "integer"
                    },
                    "source": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "status_updated_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ArchiveFileData": {
                "properties": {
                    "parts": {
                        "items": {
                            "$ref": "#/components/schemas/MultiPartData"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ArchiveFileErrorData": {
                "properties": {
                    "traceback": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ArchiveFileErrors": {
                "properties": {
                    "errors": {
                        "items": {
                            "$ref": "#/components/schemas/ArchiveFileErrorData"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ArchiveFileMetadata": {
                "properties": {
                    "estimated_created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "event_id": {
                        "type": "integer"
                    },
                    "event_id_v2": {
                        "type": "string"
                    },
                    "first_crawled_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "last_crawled_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "scraped_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "scraper_id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AuditEvent": {
                "properties": {
                    "actor_data": {
                        "properties": {},
                        "type": "object"
                    },
                    "affected_entities": {
                        "properties": {},
                        "type": "object"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "data": {
                        "properties": {},
                        "type": "object"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "original_data": {
                        "properties": {},
                        "type": "object"
                    },
                    "user_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            },
            "CredentialUrl": {
                "properties": {
                    "credential_hash": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "is_stealer_log": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Details": {
                "properties": {
                    "summary": {
                        "$ref": "#/components/schemas/InsightText"
                    },
                    "title": {
                        "$ref": "#/components/schemas/InsightText"
                    }
                },
                "required": [
                    "title"
                ],
                "type": "object"
            },
            "EnableState": {
                "properties": {
                    "is_disabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ExportPriorityActionVisualizationData": {
                "properties": {
                    "format": {
                        "enum": [
                            "csv"
                        ],
                        "example": "csv",
                        "type": "string"
                    },
                    "stream": {
                        "type": "string"
                    }
                },
                "required": [
                    "format",
                    "stream"
                ],
                "type": "object"
            },
            "FeedAlert": {
                "properties": {
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "experimental_search_types": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "feed_target_id": {
                        "type": "integer"
                    },
                    "feed_target_type": {
                        "enum": [
                            "assets/groups",
                            "assets",
                            "home"
                        ],
                        "example": "assets/groups",
                        "type": "string"
                    },
                    "feed_url": {
                        "type": "string"
                    },
                    "frequency": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organization_id": {
                        "type": "integer"
                    },
                    "params": {
                        "properties": {},
                        "type": "object"
                    },
                    "risks": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "search_types": {
                        "items": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "example": "attachment",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "start_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "integer"
                    },
                    "type": {
                        "enum": [
                            "email",
                            "channel",
                            "azure_sentinel",
                            "slack",
                            "discord",
                            "splunk",
                            "cgcd",
                            "jira",
                            "teams",
                            "servicenow",
                            "webhook"
                        ],
                        "example": "email",
                        "type": "string"
                    }
                },
                "required": [
                    "frequency",
                    "params",
                    "start_at",
                    "type"
                ],
                "type": "object"
            },
            "FootprintVisualizationChart": {
                "properties": {
                    "data": {
                        "properties": {},
                        "type": "object"
                    },
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "comparison_chart",
                            "tabular_chart",
                            "radial_chart",
                            "line_chart",
                            "bar_chart",
                            "radar_chart"
                        ],
                        "example": "comparison_chart",
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "id",
                    "type"
                ],
                "type": "object"
            },
            "GitSecretDetectionRule": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "patterns": {
                        "items": {
                            "$ref": "#/components/schemas/GitSecretDetectionRulePattern"
                        },
                        "type": "array"
                    },
                    "risk_score": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "GitSecretDetectionRulePattern": {
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "content_type": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "pattern_type": {
                        "type": "string"
                    },
                    "rule_id": {
                        "type": "integer"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "content_type",
                    "pattern_type",
                    "value"
                ],
                "type": "object"
            },
            "GroupedFeedAlerts": {
                "properties": {
                    "alerts": {
                        "$ref": "#/components/schemas/FeedAlert"
                    },
                    "key": {
                        "type": "string"
                    },
                    "organization_settings": {
                        "$ref": "#/components/schemas/OrganizationSettings"
                    },
                    "params": {
                        "properties": {},
                        "type": "object"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "alerts",
                    "key",
                    "organization_settings",
                    "params",
                    "type"
                ],
                "type": "object"
            },
            "HighlightPayload": {
                "properties": {
                    "identifier_ids": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "query_string": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HttpError": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Identifier": {
                "properties": {
                    "count": {
                        "type": "integer"
                    },
                    "data": {
                        "properties": {},
                        "type": "object"
                    },
                    "data_updated_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "experimental_search_types": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "feed_id": {
                        "type": "integer"
                    },
                    "fetching_progress": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "is_disabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "risks": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "search_types": {
                        "items": {
                            "enum": [
                                "illicit_networks",
                                "open_web",
                                "buckets",
                                "source_code",
                                "leaks",
                                "domains",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "infected_devices",
                                "seller",
                                "bot",
                                "listing",
                                "blog_post",
                                "forum_profile",
                                "ransomleak",
                                "chat_message",
                                "stealer_log",
                                "forum_post",
                                "financial_data",
                                "forum_topic",
                                "social_media",
                                "google",
                                "stack_exchange",
                                "paste",
                                "bucket",
                                "source_code_secrets",
                                "bucket_object",
                                "source_code_files",
                                "service",
                                "bucket",
                                "bucket_object",
                                "stack_exchange",
                                "source_code_files",
                                "source_code_secrets",
                                "leak",
                                "domain",
                                "forum_post",
                                "forum_topic",
                                "blog_post",
                                "forum_profile",
                                "seller",
                                "stealer_log",
                                "bot"
                            ],
                            "example": "illicit_networks",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "source": {
                        "enum": [
                            "USER",
                            "SYSTEM_RELATION",
                            "DEMO",
                            "SELF_ONBOARDING"
                        ],
                        "example": "USER",
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "integer"
                    },
                    "type": {
                        "enum": [
                            "domain",
                            "brand",
                            "name",
                            "keyword",
                            "github_repository",
                            "username",
                            "email",
                            "search_query",
                            "dork_query",
                            "bin",
                            "ip",
                            "secret",
                            "azure_tenant"
                        ],
                        "example": "domain",
                        "type": "string"
                    },
                    "urn": {
                        "description": "The uniform resource name of the identifier.",
                        "type": "string"
                    },
                    "v3_refs": {
                        "$ref": "#/components/schemas/V3_Refs"
                    }
                },
                "required": [
                    "data",
                    "name",
                    "search_types",
                    "type"
                ],
                "type": "object"
            },
            "IdentifierGroup": {
                "properties": {
                    "feed_id": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "integer"
                    },
                    "urn": {
                        "description": "The uniform resource name of the identifier group.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IdentifierRelationData": {
                "properties": {
                    "asset_relation_uuid": {
                        "type": "string"
                    },
                    "identifier_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "asset_relation_uuid",
                    "identifier_id"
                ],
                "type": "object"
            },
            "IdentifierToggle": {
                "properties": {
                    "is_disabled": {
                        "default": true,
                        "description": "The `is_disabled` parameter is used to toggle the asset as either enabled or disabled.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "is_disabled"
                ],
                "type": "object"
            },
            "Import": {
                "properties": {
                    "committed_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "integration": {
                        "enum": [
                            "csv"
                        ],
                        "example": "csv",
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "integer"
                    },
                    "type": {
                        "enum": [
                            "identifiers"
                        ],
                        "example": "identifiers",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "integration",
                    "tenant_id",
                    "type"
                ],
                "type": "object"
            },
            "ImportItemFailures": {
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "unknown_identifier_type",
                            "bad_identifier_query",
                            "above_max_group_nesting",
                            "unknown_identifier_source"
                        ],
                        "example": "unknown_identifier_type",
                        "type": "string"
                    }
                },
                "required": [
                    "message",
                    "type"
                ],
                "type": "object"
            },
            "Insight": {
                "properties": {
                    "analysis": {
                        "$ref": "#/components/schemas/InsightText"
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "paragraph": {
                        "$ref": "#/components/schemas/InsightText"
                    },
                    "title": {
                        "$ref": "#/components/schemas/InsightText"
                    },
                    "type": {
                        "type": "string"
                    },
                    "visualization": {
                        "items": {
                            "$ref": "#/components/schemas/FootprintVisualizationChart"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "analysis",
                    "date",
                    "paragraph",
                    "title",
                    "type"
                ],
                "type": "object"
            },
            "InsightText": {
                "properties": {
                    "params": {
                        "description": "Relevant data related to the text",
                        "properties": {},
                        "type": "object"
                    },
                    "text": {
                        "description": "Text for the insight",
                        "type": "string"
                    }
                },
                "required": [
                    "text"
                ],
                "type": "object"
            },
            "LeakActivityCredential": {
                "properties": {
                    "credential_hash": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "identity_name": {
                        "type": "string"
                    },
                    "ignored_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "imported_at": {
                        "type": "string"
                    },
                    "known_password_id": {
                        "type": "integer"
                    },
                    "remediated_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "source": {
                        "$ref": "#/components/schemas/source"
                    },
                    "source_id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "identity_name",
                    "imported_at",
                    "source_id"
                ],
                "type": "object"
            },
            "LeakedCredential": {
                "properties": {
                    "id": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Mitre": {
                "properties": {
                    "mitigation": {
                        "$ref": "#/components/schemas/MitreLink"
                    },
                    "techniques": {
                        "$ref": "#/components/schemas/MitreLink"
                    }
                },
                "required": [
                    "mitigation",
                    "techniques"
                ],
                "type": "object"
            },
            "MitreLink": {
                "properties": {
                    "id": {
                        "description": "Mitre's id",
                        "type": "string"
                    },
                    "text": {
                        "description": "Mitre's text",
                        "type": "string"
                    },
                    "url": {
                        "description": "Link to the Mitre url page",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "text",
                    "url"
                ],
                "type": "object"
            },
            "MultiPartData": {
                "properties": {
                    "size": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NewReport": {
                "properties": {
                    "audience": {
                        "enum": [
                            "technical",
                            "general"
                        ],
                        "example": "technical",
                        "type": "string"
                    },
                    "author": {
                        "type": "string"
                    },
                    "elements": {
                        "items": {
                            "$ref": "#/components/schemas/ReportElementUpdate"
                        },
                        "type": "array"
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "required": [
                    "author",
                    "title"
                ],
                "type": "object"
            },
            "NewTenantInfo": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "industry": {
                        "enum": [
                            "global",
                            "transport",
                            "education",
                            "energy",
                            "finance",
                            "healthcare",
                            "manufacturing",
                            "retail",
                            "software",
                            "telecommunication"
                        ],
                        "example": "global",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Organization": {
                "properties": {
                    "access_end_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "access_level": {
                        "type": "integer"
                    },
                    "disabled_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "file_analysis_enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "description": "Display name",
                        "type": "string"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/OrganizationSettings"
                    },
                    "type": {
                        "enum": [
                            "direct",
                            "service-firm"
                        ],
                        "example": "direct",
                        "type": "string"
                    },
                    "urn": {
                        "description": "The uniform resource name of the organization.",
                        "type": "string"
                    },
                    "user_limit": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "OrganizationMember": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "is_disabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organization_member_permissions": {
                        "$ref": "#/components/schemas/OrganizationMemberPermission"
                    },
                    "registered_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "surname": {
                        "type": "string"
                    },
                    "urn": {
                        "description": "The uniform resource name of the member.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrganizationMemberData": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "memberships": {
                        "items": {
                            "$ref": "#/components/schemas/UserTenantMembership"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organization_member_permissions": {
                        "properties": {},
                        "type": "object"
                    },
                    "send_welcome_email": {
                        "default": true,
                        "type": "boolean"
                    },
                    "surname": {
                        "type": "string"
                    },
                    "user_permissions": {
                        "properties": {},
                        "type": "object"
                    }
                },
                "required": [
                    "email",
                    "name",
                    "organization_member_permissions",
                    "surname"
                ],
                "type": "object"
            },
            "OrganizationMemberPermission": {
                "properties": {
                    "*": {
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "OrganizationMemberWithMetadata": {
                "properties": {
                    "tenant_count": {
                        "type": "integer"
                    },
                    "user": {
                        "$ref": "#/components/schemas/OrganizationMember"
                    }
                },
                "type": "object"
            },
            "OrganizationMonthlyUsage": {
                "properties": {
                    "global_search_calls_count": {
                        "type": "integer"
                    },
                    "identifier_count": {
                        "type": "integer"
                    },
                    "timestamp": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrganizationSettings": {
                "properties": {
                    "permissions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "PageView": {
                "properties": {
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "route": {
                        "type": "string"
                    }
                },
                "required": [
                    "route"
                ],
                "type": "object"
            },
            "PaginatedCredentials": {
                "properties": {
                    "items": {
                        "$ref": "#/components/schemas/LeakActivityCredential"
                    },
                    "next": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PartialSource": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PermissionData": {
                "properties": {
                    "permission": {
                        "type": "string"
                    },
                    "value": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "permission",
                    "value"
                ],
                "type": "object"
            },
            "PriorityActionHeader": {
                "properties": {
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "snooze_until": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "status_last_updated_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "summary": {
                        "$ref": "#/components/schemas/InsightText"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "title": {
                        "$ref": "#/components/schemas/InsightText"
                    },
                    "type": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "created_at",
                    "snooze_until",
                    "status",
                    "status_last_updated_at",
                    "tags",
                    "title",
                    "type",
                    "uuid"
                ],
                "type": "object"
            },
            "PriorityActionRelatedActivity": {
                "properties": {
                    "remediated": {
                        "type": "boolean"
                    },
                    "tenant_id": {
                        "type": "integer"
                    },
                    "uid": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "remediated",
                    "tenant_id",
                    "uid",
                    "uuid"
                ],
                "type": "object"
            },
            "RansomLeakData": {
                "properties": {
                    "breached_at": {
                        "description": "Date of the ransomleak",
                        "format": "date-time",
                        "type": "string"
                    },
                    "country": {
                        "description": "Country of the victim",
                        "type": "string"
                    },
                    "domain": {
                        "description": "Domain of the victim",
                        "type": "string"
                    },
                    "employee_count": {
                        "description": "Number of employee of the victim",
                        "type": "integer"
                    },
                    "event_created_at": {
                        "description": "Date of the ransomleak event in the feed",
                        "format": "date-time",
                        "type": "string"
                    },
                    "identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/RansomLeakIdentifierData"
                        },
                        "type": "array"
                    },
                    "industry": {
                        "description": "Industry of the victim",
                        "type": "string"
                    },
                    "publisher": {
                        "description": "Publisher of the ransomleak",
                        "type": "string"
                    },
                    "risk_score": {
                        "description": "Computed risk of the ransomleak",
                        "type": "integer"
                    },
                    "uid": {
                        "description": "event uid of the ransomleak",
                        "type": "string"
                    },
                    "user_metadata": {
                        "$ref": "#/components/schemas/ActivityUserMetadata"
                    },
                    "victim": {
                        "description": "Victim of the ransomleak",
                        "type": "string"
                    }
                },
                "required": [
                    "breached_at",
                    "event_created_at",
                    "identifiers",
                    "publisher",
                    "risk_score",
                    "uid",
                    "victim"
                ],
                "type": "object"
            },
            "RansomLeakIdentifierData": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "identifier_type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ReportElementUpdate": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "position": {
                        "type": "integer"
                    },
                    "sort_by": {
                        "type": "string"
                    },
                    "time_interval": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RiskScoresItem": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "initial_risk_score": {
                        "type": "integer"
                    },
                    "risk_diff": {
                        "type": "integer"
                    },
                    "risk_score": {
                        "type": "integer"
                    },
                    "risk_score_updated_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Search": {
                "properties": {
                    "items": {
                        "items": {
                            "properties": {},
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "links": {
                        "$ref": "#/components/schemas/SearchLinks"
                    },
                    "nb_hits": {
                        "type": "integer"
                    },
                    "search_after": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SearchLinks": {
                "properties": {
                    "next": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Subdomains": {
                "properties": {
                    "subdomain": {
                        "type": "string"
                    }
                },
                "required": [
                    "subdomain"
                ],
                "type": "object"
            },
            "SubscriptionPlan": {
                "properties": {
                    "global_search_calls_limit": {
                        "description": "Number of calls allowed via API for global search on the plan",
                        "type": "integer"
                    },
                    "id": {
                        "description": "Unique id for the Subscription plan",
                        "type": "integer"
                    },
                    "identifier_rotation_limit": {
                        "description": "Maximum monthly allowed identifier rotations",
                        "type": "integer"
                    },
                    "identifiers_price": {
                        "description": "Price of the identifiers plan",
                        "type": "integer"
                    },
                    "max_identifiers": {
                        "description": "Maximum number of identifiers for the plan",
                        "type": "integer"
                    },
                    "organization_id": {
                        "description": "Organization id associated with the plan",
                        "type": "integer"
                    },
                    "plan_identifiers_template_id": {
                        "description": "Reference to the plan template for identifiers",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "TableChartDataModel": {
                "properties": {
                    "items": {
                        "items": {
                            "properties": {},
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Tenant": {
                "properties": {
                    "description": {
                        "description": "This tenant's purpose",
                        "type": "string"
                    },
                    "feed_id": {
                        "description": "ID of the feed",
                        "type": "integer"
                    },
                    "id": {
                        "description": "Tenant ID",
                        "type": "integer"
                    },
                    "industry": {
                        "description": "The industry of the tenant.",
                        "type": "string"
                    },
                    "is_archived": {
                        "description": "Indicates if the tenant is archived",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Tenant name",
                        "type": "string"
                    },
                    "number_of_employees": {
                        "description": "The number of employees for the tenant.",
                        "type": "integer"
                    },
                    "organization_id": {
                        "description": "ID of the owner organization",
                        "type": "integer"
                    },
                    "permissions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Tenant type",
                        "type": "string"
                    },
                    "urn": {
                        "description": "The uniform resource name of the tenant.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TenantData": {
                "properties": {
                    "description": {
                        "description": "The Tenant's purpose / description",
                        "type": "string"
                    },
                    "industry": {
                        "description": "The Tenant's industry",
                        "enum": [
                            "global",
                            "transport",
                            "education",
                            "energy",
                            "finance",
                            "healthcare",
                            "manufacturing",
                            "retail",
                            "software",
                            "telecommunication"
                        ],
                        "example": "global",
                        "type": "string"
                    },
                    "name": {
                        "description": "The Tenant display name",
                        "type": "string"
                    },
                    "permissions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The Tenant's type",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "industry",
                    "name",
                    "type"
                ],
                "type": "object"
            },
            "TenantDiscoveryPolicy": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "identifier_types": {
                        "items": {
                            "enum": [
                                "domain",
                                "brand",
                                "name",
                                "keyword",
                                "github_repository",
                                "username",
                                "email",
                                "search_query",
                                "dork_query",
                                "bin",
                                "ip",
                                "secret",
                                "azure_tenant"
                            ],
                            "example": "domain",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tenant_id": {
                        "type": "integer"
                    },
                    "terms": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "auto-accept",
                            "ignore-term",
                            "ignore-pattern"
                        ],
                        "example": "auto-accept",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TenantIgnoredTerms": {
                "properties": {
                    "clean_past_events": {
                        "type": "boolean"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "search_types": {
                        "items": {
                            "enum": [
                                "attachment",
                                "listing",
                                "ransomleak",
                                "forum_post",
                                "forum_topic",
                                "forum_profile",
                                "blog_post",
                                "seller",
                                "paste",
                                "leak",
                                "chat_message",
                                "chat_message/telegram",
                                "domain",
                                "bot",
                                "stealer_log",
                                "infected_devices",
                                "driller",
                                "driller_forum_topic",
                                "driller_forum_post",
                                "driller_profile",
                                "cc",
                                "ccbin",
                                "financial_data",
                                "leaked_data",
                                "leaked_file",
                                "document",
                                "account",
                                "actor",
                                "forum_content",
                                "blog_content",
                                "profile",
                                "illicit_networks",
                                "open_web",
                                "domains",
                                "leaks",
                                "social_media_account",
                                "social_media",
                                "source_code",
                                "source_code_secrets",
                                "source_code_files",
                                "stack_exchange",
                                "google",
                                "service",
                                "driller_host",
                                "buckets",
                                "bucket",
                                "bucket_object",
                                "whois",
                                "ad",
                                "ads",
                                "experimental"
                            ],
                            "example": "attachment",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "terms": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "clean_past_events",
                    "created_at",
                    "name",
                    "search_types",
                    "uuid"
                ],
                "type": "object"
            },
            "TenantUser": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "is_readonly": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "surname": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TenantUsers": {
                "properties": {
                    "items": {
                        "$ref": "#/components/schemas/TenantUser"
                    },
                    "next": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "TenantWithCounts": {
                "properties": {
                    "identifier_count": {
                        "type": "integer"
                    },
                    "tenant": {
                        "$ref": "#/components/schemas/Tenant"
                    },
                    "user_count": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "TimeChartSerie": {
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "data": {
                        "items": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    },
                    "interval": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateGroupData": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdatedPermission": {
                "properties": {
                    "updated_value": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "UpdatedReport": {
                "properties": {
                    "audience": {
                        "enum": [
                            "technical",
                            "general"
                        ],
                        "example": "technical",
                        "type": "string"
                    },
                    "author": {
                        "type": "string"
                    },
                    "elements": {
                        "items": {
                            "$ref": "#/components/schemas/ReportElementUpdate"
                        },
                        "type": "array"
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "User": {
                "properties": {
                    "color_scheme": {
                        "enum": [
                            "auto",
                            "light",
                            "dark"
                        ],
                        "example": "auto",
                        "type": "string"
                    },
                    "email": {
                        "description": "User's email",
                        "type": "string"
                    },
                    "feature_flags": {
                        "properties": {},
                        "type": "object"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "is_admin": {
                        "type": "boolean"
                    },
                    "is_disabled": {
                        "type": "boolean"
                    },
                    "language": {
                        "description": "User's language",
                        "type": "string"
                    },
                    "name": {
                        "description": "Users's name",
                        "type": "string"
                    },
                    "organization_id": {
                        "description": "ID of the owner organization",
                        "type": "integer"
                    },
                    "organization_member_permissions": {
                        "properties": {},
                        "type": "object"
                    },
                    "registered_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/UserSettings"
                    },
                    "surname": {
                        "description": "User's surname",
                        "type": "string"
                    },
                    "urn": {
                        "description": "The uniform resource name of the user.",
                        "type": "string"
                    }
                },
                "required": [
                    "color_scheme",
                    "email",
                    "language",
                    "name"
                ],
                "type": "object"
            },
            "UserProfile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    },
                    {
                        "properties": {
                            "domain": {
                                "type": "string"
                            },
                            "feature_flags": {
                                "$ref": "#/components/schemas/UserProfile_allOf_feature_flags"
                            },
                            "has_password": {
                                "type": "boolean"
                            },
                            "is_sso_mandatory": {
                                "type": "boolean"
                            },
                            "language": {
                                "type": "string"
                            },
                            "needs_eusa": {
                                "type": "boolean"
                            },
                            "rate": {
                                "$ref": "#/components/schemas/UserRate"
                            },
                            "settings": {
                                "$ref": "#/components/schemas/UserSettings"
                            },
                            "tenants": {
                                "items": {
                                    "$ref": "#/components/schemas/Tenant"
                                },
                                "type": "array"
                            },
                            "urn": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "UserRate": {
                "properties": {
                    "api": {
                        "type": "integer"
                    },
                    "reset_at": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserSettings": {
                "properties": {
                    "default_search": {
                        "type": "string"
                    },
                    "organization_member_permissions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "permissions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UserTenantAccess": {
                "properties": {
                    "is_readonly": {
                        "description": "Access given to the user for the tenant",
                        "type": "boolean"
                    },
                    "user_id": {
                        "description": "The ID of the user to add to the tenant",
                        "type": "integer"
                    }
                },
                "required": [
                    "is_readonly",
                    "user_id"
                ],
                "type": "object"
            },
            "UserTenantAccessRequest": {
                "properties": {
                    "users": {
                        "items": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/UserTenantAccess"
                                }
                            ],
                            "description": "User given access to a tenant.",
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UserTenantMembership": {
                "properties": {
                    "is_readonly": {
                        "type": "boolean"
                    },
                    "tenant_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "is_readonly",
                    "tenant_id"
                ],
                "type": "object"
            },
            "UserUpdate": {
                "properties": {
                    "color_scheme": {
                        "enum": [
                            "auto",
                            "light",
                            "dark"
                        ],
                        "example": "auto",
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "settings": {
                        "properties": {},
                        "type": "object"
                    },
                    "surname": {
                        "type": "string"
                    }
                },
                "required": [
                    "color_scheme",
                    "name",
                    "settings",
                    "surname"
                ],
                "type": "object"
            },
            "V3_Refs": {
                "properties": {
                    "asset_uuid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "average_by_risk_score": {
                "properties": {
                    "risk_score": {
                        "type": "integer"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/date_count"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "average_by_search_type": {
                "properties": {
                    "search_type": {
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/date_count"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "count_by_risk_score": {
                "properties": {
                    "risk_score": {
                        "type": "integer"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/date_count"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "count_by_search_type": {
                "properties": {
                    "search_type": {
                        "type": "string"
                    },
                    "values": {
                        "items": {
                            "$ref": "#/components/schemas/date_count"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "date_count": {
                "properties": {
                    "count": {
                        "type": "integer"
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "source": {
                "properties": {
                    "breached_at": {
                        "type": "string"
                    },
                    "description_en": {
                        "type": "string"
                    },
                    "description_fr": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "leaked_at": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "get_activity_assistance_resource__activities__string_index___string_source___path_id__ai_assistance_200_response": {
                "properties": {
                    "activity_ai_assistance": {
                        "$ref": "#/components/schemas/ActivityAiAssistance"
                    }
                },
                "type": "object"
            },
            "get_assets__assets__200_response": {
                "properties": {
                    "assets": {
                        "$ref": "#/components/schemas/Identifier"
                    }
                },
                "type": "object"
            },
            "post_assets__assets__200_response": {
                "properties": {
                    "asset": {
                        "$ref": "#/components/schemas/Identifier"
                    }
                },
                "type": "object"
            },
            "get_assets_groups__assets_groups__200_response": {
                "properties": {
                    "assets_groups": {
                        "$ref": "#/components/schemas/IdentifierGroup"
                    }
                },
                "type": "object"
            },
            "post_assets_groups__assets_groups__200_response": {
                "properties": {
                    "assets_group": {
                        "$ref": "#/components/schemas/IdentifierGroup"
                    }
                },
                "type": "object"
            },
            "get_assets_group_alerts__assets_groups__int_assets_group_id__alerts_200_response": {
                "properties": {
                    "alerts": {
                        "$ref": "#/components/schemas/FeedAlert"
                    }
                },
                "type": "object"
            },
            "put_current_user_profile__me_profile_200_response": {
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/UserProfile"
                    }
                },
                "type": "object"
            },
            "get_organization_members_api__organizations__int_organization_id__members_200_response": {
                "properties": {
                    "members": {
                        "$ref": "#/components/schemas/OrganizationMemberWithMetadata"
                    }
                },
                "type": "object"
            },
            "post_organization_members_api__organizations__int_organization_id__members_200_response": {
                "properties": {
                    "member": {
                        "$ref": "#/components/schemas/OrganizationMemberWithMetadata"
                    }
                },
                "type": "object"
            },
            "UserProfile_allOf_feature_flags": {
                "properties": {},
                "type": "object"
            }
        },
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "x-original-swagger-version": "2.0"
}